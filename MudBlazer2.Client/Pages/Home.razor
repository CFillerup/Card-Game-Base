@page "/"
@using MudBlazer2.Client.Models
@using System.Text.Json
@inject IJSRuntime JSRuntime

<!-- Full-Screen Board -->
<div class="board">
    <button @onclick="AddHeroClassCards">Add Card Pile</button>

    @foreach (var pile in cardPiles)
    {
        if (pile.Cards.Count > 0)
        {
            <div id="draggableDiv_@pile.Id"
                 class="draggable @(pile.FaceUp ? "" : "flipped")"
                 data-rotation="@pile.Rotation"
                 data-faceup="@pile.FaceUp"
                 @onmousedown="(e) => StartDrag(e, pile)"
                 @ondblclick="() => FlipCard(pile)"
                 style="@(pile.StartingPosition != null ? $"left: {pile.StartingPosition.X}px; top: {pile.StartingPosition.Y}px; rotateY(180deg)" : "")">

                <!--   Create the visual stacking effect -->
                @for (int i = 1; i < pile.Cards.Count; i++)
                {
                    <div class="card-shadow" style="top:@(i * 3)px; left:@(i * 3)px; z-index:-@(i)"></div>
                }

                <!--   Top visible card -->
                <div class="card-inner">
                    <div class="card-front">
                        <div class="card-content">
                            @switch (pile.Cards.LastOrDefault()?.CardType)
                            {
                                case CardBase.CardTypeEnum.HeroClass:
                                    var card = pile.Cards.LastOrDefault() as HeroClassCard;
                                    <div class="hero-class-card">
                                        <h3 class="card-title">@card.Name</h3>
                                        <p class="card-description">@card.Description</p>

                                        <div class="dice-modifications">
                                            @foreach (var modifier in card.DiceModifications)
                                            {
                                                <h4>
                                                    @modifier.Key: @modifier.Value
                                                </h4>
                                            }
                                        </div>

                                        <div class="class-abilities">
                                            <ul>
                                                @foreach (var ability in card.ClassAbilities)
                                                {
                                                    <li><strong>@ability.Name</strong> (@ability.AbilityType): @ability.Effect</li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                    break;
                                default:
                                    <div style="height:10%; outline: 2px solid black;">@pile.Cards.LastOrDefault()?.Name</div>
                                    <div style="height:40%; outline: 2px solid black;">image</div>
                                    <div style="height:10%; outline: 2px solid black;">@pile.Cards.LastOrDefault()?.CardType</div>
                                    <div style="height:40%; outline: 2px solid black;">@pile.Cards.LastOrDefault()?.Description</div>
                                    break;
                            }

                        </div>
                    </div>
                    <div class="card-back">
                        @pile.Cards.LastOrDefault()?.CardBack (@pile.Cards.Count)
                    </div>
                </div>
            </div>
        }
    }
</div>


@code {
    private List<CardPile> cardPiles = new();
    private int cardCount = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Wait until JS is available before calling setBlazorHelper
            await JSRuntime.InvokeVoidAsync("setTimeout", 100);
            var dotNetRef = DotNetObjectReference.Create(this);

            try
            {
                await JSRuntime.InvokeVoidAsync("setBlazorHelper", dotNetRef);
                Console.WriteLine(" Blazor Helper Set!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($" Error: Could not set Blazor Helper - {ex.Message}");
                await Task.Delay(1000);
                await OnAfterRenderAsync(firstRender);
            }
        }

        foreach (var pile in cardPiles)
        {
            await EnableDragging(pile);
        }
    }

    private async Task EnableDragging(CardPile pile)
    {
        await JSRuntime.InvokeVoidAsync("enableDragging", $"draggableDiv_{pile.Id}");
    }

    private async void AddCardPile()
    {
        cardCount++;
        var newPile = new CardPile
            {
                Name = $"Card Pile {cardCount}",
                Id = cardCount,
                CanMove = true,
                FaceUp = false,
                Cards = new List<CardBase>
            {
                new CardBase
                {
                    Name = $"Example Card",
                    Description = "This is an example card",
                    CardBack = "Card Back"
                }
            },
                StartingPosition = new Models.Position { X = 100, Y = 100 }
            };

        cardPiles.Add(newPile);
        await JSRuntime.InvokeVoidAsync("setElementPosValues", $"draggableDiv_{newPile.Id}", newPile.StartingPosition.X, newPile.StartingPosition.Y);
        StateHasChanged();
        await EnableDragging(newPile);
    }
    private async void FlipCard(CardPile pile)
    {
        await JSRuntime.InvokeVoidAsync("flipCard", $"draggableDiv_{pile.Id}");
    }
    private async void StartDrag(MouseEventArgs e, CardPile pile)
    {
        await EnableDragging(pile);
    }

    [JSInvokable]
    public async Task DrawTopCardJS(string elementId)
    {
        var pile = cardPiles.FirstOrDefault(x => x.Id.ToString() == elementId.Split("_")[1]);
        if (pile == null || pile.Cards.Count <= 1) return;

        var topCard = pile.Cards.LastOrDefault();
        var pilePosition = await JSRuntime.InvokeAsync<Models.Position>("getPilePosition", $"draggableDiv_{pile.Id}");
        if (topCard != null)
        {
            cardCount++;

            var newCardPile = new CardPile
                {
                    Name = topCard.Name,
                    Id = cardCount,
                    CanMove = true,
                    Cards = new List<CardBase> { topCard },
                    NewCard = true,
                    StartingPosition = new Models.Position { X = pilePosition.X, Y = pilePosition.Y }
                };

            pile.Cards.Remove(topCard);
            cardPiles.Add(newCardPile);
            StateHasChanged();

            await Task.Delay(50);
            await JSRuntime.InvokeVoidAsync("flipCard", $"draggableDiv_{newCardPile.Id}", elementId);
            var moveDistance = pilePosition.Width + 10;
            var newX = pilePosition.X + moveDistance;
            await JSRuntime.InvokeVoidAsync("moveElementRight", $"draggableDiv_{pile.Id}", $"draggableDiv_{newCardPile.Id}", moveDistance);
            await JSRuntime.InvokeVoidAsync("setElementPosValues", $"draggableDiv_{newCardPile.Id}", newX);

            await Task.Delay(300);
            //await JSRuntime.InvokeVoidAsync("setElementPosition", $"draggableDiv_{pile.Id}", $"draggableDiv_{newCardPile.Id}", moveDistance);


        }
    }







    //   Collision Detection
    [JSInvokable]
    public async Task OnCollisionDetected(string id1, string id2)
    {
        var pileOne = cardPiles.FirstOrDefault(x => x.Id.ToString() == id1.Split("_")[1]);
        var pileTwo = cardPiles.FirstOrDefault(x => x.Id.ToString() == id2.Split("_")[1]);

        if (pileOne == null || pileTwo == null)
        {
            Console.WriteLine($"Collision Error: Could not find piles for {id1} or {id2}");
            return;
        }

        Console.WriteLine($"Triggering snapToStack for {id1} → {id2}");

        //   Call JavaScript to animate the snap effect
        await JSRuntime.InvokeVoidAsync("snapToStack", $"draggableDiv_{pileOne.Id}", $"draggableDiv_{pileTwo.Id}");

        //   Wait for animation to complete before merging
        await Task.Delay(250);

        pileTwo.Cards.AddRange(pileOne.Cards);
        pileOne.Cards.Clear();

        StateHasChanged();
    }
    [JSInvokable]
    public async Task ShufflePileJS(string elementId)
    {
        var pile = cardPiles.FirstOrDefault(x => x.Id.ToString() == elementId.Split("_")[1]);
        if (pile == null || pile.Cards.Count <= 1) return;

        // 🔹 Shuffle the pile
        var rng = new Random();
        pile.Cards = pile.Cards.OrderBy(x => rng.Next()).ToList();

        StateHasChanged();
    }
    public async Task AddHeroClassCards()
    {
        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "hero_class_cards.json");
        // Ensure this file exists in the working directory
        List<HeroClassCard> heroClassCards = LoadCardPileFromJson(filePath);

        cardPiles.Add(new CardPile
            {
                Name = "Hero Class Cards",
                Id = cardCount,
                CanMove = true,
                FaceUp = true,
                Cards = new List<CardBase>(heroClassCards),
                StartingPosition = new Models.Position { X = 100, Y = 100 }
            });
    }

    public static List<HeroClassCard> LoadCardPileFromJson(string filePath)
    {
        try
        {
            string json = File.ReadAllText(filePath);
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            HeroClassCardCollection cardCollection = JsonSerializer.Deserialize<HeroClassCardCollection>(json, options);
            return cardCollection?.HeroClassCards ?? new List<HeroClassCard>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading hero class cards: {ex.Message}");
            return new List<HeroClassCard>();
        }
    }

    public class HeroClassCardCollection
    {
        public List<HeroClassCard> HeroClassCards { get; set; }
    }

}
